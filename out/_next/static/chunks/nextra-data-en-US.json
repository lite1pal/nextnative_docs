{"/components/modal":{"title":"Modal Component","data":{"":"A reusable modal system for your app. It includes:‚Ä¢ useModalController() ‚Äî controls modal open/close\n‚Ä¢ ModalWrapper ‚Äî clean layout with optional header","how-to-use#How to Use":"const { modalRef, isOpen, open, close } = useModalController();\nThen render the modal:\n<ModalWrapper modalRef={modalRef} presentingElement={presentingElement}>\n  <div>\n    <button onClick={close}>Close</button>\n    <PremiumScreen dismiss={close} />\n  </div>\n</ModalWrapper>","usemodalcontroller#useModalController":"A custom hook that makes modal management easier.Returns:modalRef - Ref to pass into modal\nisOpen - Whether modal is open\nopen() - Opens the modal\nclose() - Closes the modal","example#Example":"const {\nmodalRef,\nopen,\nclose,\n} = useModalController();\n<IonButton onClick={open}>Open Modal</IonButton>\n<ModalWrapper modalRef={modalRef} presentingElement={pageRef.current}>\n  <X onClick={close} />\n  <PremiumScreen dismiss={close} />\n</ModalWrapper>"}},"/components/screen-container":{"title":"ScreenContainer","data":{"":"A layout wrapper for mobile screens. It provides:‚Ä¢ Consistent spacing\n‚Ä¢ Safe area padding (avoids notches and bottom tabs)\n‚Ä¢ Scroll support (if needed)‚úÖ When to use:Wrap any mobile screen in ScreenContainer to:‚Ä¢ Make sure content doesn‚Äôt get hidden behind status bar, tabs, or keyboard\n‚Ä¢ Apply common styles across screens\nimport ScreenContainer from \"@/components/ScreenContainer\";\nexport default function SettingsScreen() {\n  return (\n    <ScreenContainer>\n      <div>Settings screen</div>\n    </ScreenContainer>\n  );\n}\nThen add it in app.tsx:\nexport default function App() {\n  return (\n    <IonTabs>\n      <IonRouterOutlet>\n        {/* Other screens */}\n        <Route exact path=\"/app/settings\" component={SettingsScreen} />\n        <Route exact path=\"/app\">\n          <Redirect to=\"/app/settings\" />\n        </Route>\n      </IonRouterOutlet>\n      <IonTabBar slot=\"bottom\">\n        {/* Other tabs */}\n        <IonTabButton tab=\"/app/settings\" href=\"/app/settings\">\n          <Settings size={22} />\n        </IonTabButton>\n      </IonTabBar>\n    </IonTabs>\n  );\n}"}},"/features/database":{"title":"üì¶ Connect Supabase in your Next.js mobile app","data":{"1-create-your-supabase-project#1. Create Your Supabase Project":"Go to supabase.com and sign in.\nClick New Project.\nFill in:\nProject name\nStrong database password\nRegion (choose the closest to your users)\nClick Create Project\n‚è≥ Wait ~1 minute for your database to be provisioned.","2-get-your-supabase-keys#2. Get Your Supabase Keys":"In your Supabase project, go to Settings ‚Üí API\nCopy the following:\nSUPABASE_URL\nSUPABASE_ANON_KEY","3-add-to-your-env-file#3. Add to Your .env File":"Paste the values into your .env:\nNEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key","-replacing-supabase-with-your-own-postgres-setup-advanced#üîÑ Replacing Supabase with Your Own Postgres Setup (Advanced)":"If you prefer full control, you can swap Supabase with your own hosted PostgreSQL database.","set-up-your-own-postgres-database#Set Up Your Own Postgres Database":"Use a managed service like:‚Ä¢ Render\n‚Ä¢ Neon\n‚Ä¢ DigitalOcean\n‚Ä¢ Or host it yourself.Make sure to configure:‚Ä¢ Database URL\n‚Ä¢ Authentication method\n‚Ä¢ Allowed IPs\n‚Ä¢ SSL if needed","update-your-environment-variables#Update Your Environment Variables":"Instead of Supabase variables, use a direct Postgres connection string:\nDATABASE_URL=postgresql://user:password@host:port/database\nYou can either:‚Ä¢ Use Prisma ORM\n‚Ä¢ Or build your own queries using a library like pg","-why-its-set-up-this-way#‚úÖ Why It‚Äôs Set Up This Way":"NextNative uses Supabase only for convenience.\nBut everything is decoupled, so you can fully swap out the database layer without touching your Auth, or frontend logic."}},"/features/nextjs-api":{"title":"Create API Routes & Fetch with SWR","data":{"":"Let‚Äôs make a simple API route and fetch data from it using SWR.","-step-1-create-an-api-route#üõ† Step 1: Create an API route":"Create a new file under app/api/hello/route.ts.\n// app/api/hello/route.ts\nexport async function GET() {\n  return Response.json({ message: \"Hello from the API!\" });\n}","-step-2-fetch-data-with-swr#üß† Step 2: Fetch data with SWR":"Now let‚Äôs use it in a component:\n\"use client\";\nimport config from \"@/config\";\nimport { fetcher } from \"@/lib/utils\";\nimport useSWR from \"swr\";\nfunction HelloMessage() {\n  const { data, isLoading, error } = useSWR(\n    `${config.api.url}/hello`,\n    fetcher,\n    {\n      refreshInterval: 500, // optional polling\n    }\n  );\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error loading chat</div>;\n  return (\n    <div className=\"text-3xl font-[600] mt-36 mx-auto w-fit\">\n      {data?.message}\n    </div>\n  );\n}\nexport default HelloMessage;\nMake sure to update NEXT_PUBLIC_PRODUCTION_URL when you deploy your app\nand API. Your mobile app fetches data from this endpoint, so the API must be\ndeployed first.","-step-3-send-post-requests-with-auth--refresh-ui#üì≠ Step 3: Send POST Requests with Auth + Refresh UI":"Let‚Äôs build a secure POST request and instantly update the UI with mutate() from SWR.","-create-a-post-api-route#üß± Create a POST API route":"// app/api/chat/route.ts\nexport async function POST(req: Request) {\n  const body = await req.json();\n  // üîê Get auth token from header\n  const token = req.headers.get(\"Authorization\")?.replace(\"Bearer \", \"\");\n  console.log(\"Received token:\", token);\n  return Response.json({\n    message: `You said: ${body.text}`,\n  });\n}","-add-authorization-header-bearer-token#üîê Add Authorization Header (Bearer token)":"const res = await fetch(`${config.api.url}/chat`, {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${user.token}`, // üëà Add your token here\n  },\n  body: JSON.stringify({ text }),\n});\nMake sure user.token is securely retrieved (e.g. from your auth provider).","-use-mutate-to-refresh-cached-data#üîÅ Use mutate to refresh cached data":"import useSWR, { mutate } from \"swr\";\nconst sendMessage = async () => {\n  await fetch(`${config.api.url}/chat`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ text }),\n  });\n  mutate(`/api/chat`); // üîÅ Re-fetch latest data from API\n};\nWant to go deeper? Learn more on the SWR official website\n‚Üí","-step-4-support-cors-with-options-handler#üåç Step 4: Support CORS with OPTIONS Handler":"When sending requests from a mobile app, especially with custom headers, the browser or WebView may first send an OPTIONS preflight request. If your API route doesn‚Äôt respond to it, the request will fail.To support this, add an OPTIONS handler to your route:\n// app/api/chat/route.ts\nexport async function OPTIONS() {\n  return new Response(null, {\n    status: 204,\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET,POST,OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n    },\n  });\n}\nThis ensures your endpoint handles preflight checks properly, allowing mobile apps (and other clients) to make authenticated POST requests with no issues."}},"/features/authorization":{"title":"Firebase Authentication Setup for iOS & Android","data":{"-skip-auth-logic-to-test-app-without-it#üîß Skip Auth logic to test app without it":"Still setting up Firebase Auth? You can skip the sign-in screen and test your app by setting:\n// (mobile)/router.tsx\nconst isSignedInTest = true;","create-a-firebase-project#Create a Firebase project":"To set up authorization, start by creating a new project in Firebase:Go your project on Firebase and create a new project.","update-values-in-envlocal#Update values in .env.local":"Take these Firebase Auth config values and paste them in your .env.local","ios-setup#iOS Setup":"Rename your app before setting\nup Firebase Authorization for iOS.","1-register-your-ios-app#1. Register your iOS app":"In the Firebase console:\nClick Add App ‚Üí Select iOS\nEnter your iOS Bundle ID (e.g. com.yourcompany.yourapp)\n(Optional) Add an App nickname\nClick Register App","2-download-the-firebase-config-file#2. Download the Firebase config file":"Once your iOS app is registered:\nClick Download GoogleService-Info.plist\nSave it locally ‚Äì you'll need it in Xcode","3-open-ios-project-in-xcode#3. Open iOS project in Xcode":"Run the following command:\nnpx cap open ios","4-add-the-config-to-your-project#4. Add the config to your project":"Drag & drop the GoogleService-Info.plist into Xcode\nSelect ‚ÄúCopy items if needed‚Äù\nPlace it in the root of the app target folder","5-install-firebase-sdk-via-swift-package-manager#5. Install Firebase SDK via Swift Package Manager":"In Xcode: File ‚Üí Add Packages\nPaste:\n   https://github.com/firebase/firebase-ios-sdk\nSelect only the modules you need (e.g. FirebaseAuth)\nClick Add Package","6-enable-google-sign-in#6. Enable Google Sign-In":"Go to Authentication ‚Üí Sign-in method\nEnable Google\nSave\nüîÅ Re-download GoogleService-Info.plist and replace the old one","7-enable-apple-sign-in#7. Enable Apple Sign-In":"Go to Authentication ‚Üí Sign-in method\nEnable Apple\nSave","8-configure-custom-url-scheme#8. Configure Custom URL Scheme":"In Xcode, open project settings\nSelect your app under Targets\nGo to Info ‚Üí URL Types\nClick ‚ûï and add a new entry\nIn URL Schemes, paste your REVERSED_CLIENT_ID\n(found in GoogleService-Info.plist) 6. Leave other fields empty\nThis step enables Google login redirect to work","9-test-login-flow#9. Test Login Flow":"You can now call:\nimport { FirebaseAuthentication } from \"@capacitor-firebase/authentication\";\nawait FirebaseAuthentication.signInWithGoogle();\n// or\nawait FirebaseAuthentication.signInWithApple();\nSign out:\nawait FirebaseAuthentication.signOut();\nYou can use SignInScreen.tsx component where all of these is done. It's\ngoing to be run by default.","android-setup#Android Setup":"If you don't need Firebase Auth/Notifications in your app at all,\ngo to build.gradle and remove this line:\napply plugin: 'com.google.gms.google-services'\nRename your app before setting\nup Firebase Authorization for Android.","1-add-a-new-android-app#1. Add a new Android app":"In the Firebase console:\nClick Add App ‚Üí Select Android\nEnter your app‚Äôs Package name (e.g. com.yourcompany.appname)\n(Optional) Add app nickname\nClick Register app","2-set-sha-1-fingerprint#2. Set SHA-1 fingerprint":"It's essential to enable Google sign-in.\nOpen a terminal and run:macOS/Linux:\nkeytool -list -v \\\n-alias androiddebugkey -keystore ~/.android/debug.keystore\nWindows:\nkeytool -list -v \\\n-alias androiddebugkey -keystore %USERPROFILE%\\.android\\debug.keystore\nIt will prompt you to enter a password for the keystore.The default password for the debug keystore is android. The keytool then prints the fingerprint to the terminal. For example:\nCertificate fingerprint: SHA1: DA:39:A3:EE:5E:6B:4B:0D:32:55:BF:EF:95:60:18:90:AF:D8:07:09\nCopy it and paste here in Firebase Project Settings for your Android app:","3-download--replace-config-file#3. Download & replace config file":"Download the google-services.json file\nPlace it in:\nandroid/app/google-services.json","4-enable-google-sign-in#4. Enable Google Sign-In":"In Firebase Console:\nGo to Authentication ‚Üí Sign-in method\nEnable Google\nSave","5-sign-in-with-google#5. Sign in with Google":"Use the Capacitor plugin to trigger login:\nimport { FirebaseAuthentication } from \"@capacitor-firebase/authentication\";\nawait FirebaseAuthentication.signInWithGoogle();\nSign out:\nawait FirebaseAuthentication.signOut();","6-test-on-real-android-device#6. Test on real Android device":"npx cap open android\nUse a physical device with Google Play Services. Most emulators don‚Äôt support\nthis.","web#Web":"","1-add-a-new-web-app-in-firebase#1. Add a new Web app in Firebase":"Go to your Firebase project\nClick Add App ‚Üí Select the Web icon\nEnter a nickname (e.g. My Web App)\nClick Register App","2-update-values-in-envlocal#2. Update values in .env.local":"Skip if already done.\nTake these Firebase Auth config values and paste them in your .env.local"}},"/features/in-app-purchases":{"title":"Set Up In-App Purchases & Subscriptions with RevenueCat + Capacitor","data":{"":"Let's set up in-app purchases & subscriptions in your NextNative app using RevenueCat.","whats-revenuecat#What's RevenueCat?":"RevenueCat handles all the complex stuff with in-app purchases so you don't have to. It works across iOS and Android, and gives you a simple API to work with.","setting-up-revenuecat#Setting up RevenueCat":"","1-create-a-revenuecat-account#1. Create a RevenueCat account":"Head over to RevenueCat and create an account\nBefore you can start using RevenueCat to fetch products, you must configure your products in the respective stores. See the following guides for App Store Connect, Google Play Console for help navigating through this process.If you are selling iOS products, be sure to sign your 'Paid Applications Agreement' and fill out your bank and tax information in App Store Connect > Agreements, Tax, and Banking. This needs to be completed before you can test any purchases.","2-import-configured-products#2. Import configured products":"Once your in-app products have been configured in App Store Connect/Google, go to RevenueCat's dashboard, and create new products.\nProducts are the individual in-app purchases you set up on the store platforms\n(e.g., Apple, Google).\nChoose the app that you set up in the Apple/Google.\nClick Import to add all products automatically.","3-add-api-keys-and-product-ids-to-envlocal#3. Add api keys and product ids to .env.local":"Then go to each product, copy its Identifier, and paste into .env file\nNEXT_PUBLIC_REVENUECAT_API_KEY=your_revenuecat_key_here\nNEXT_PUBLIC_REVENUECAT_MONTHLY_ID=your_monthly_product_id\nNEXT_PUBLIC_REVENUECAT_ANNUALY_ID=your_annualy_product_id\nNEXT_PUBLIC_REVENUECAT_LIFETIME_ID=your_lifetime_product_id","using-userevenuecat-in-your-app#Using useRevenueCat in your app":"useRevenueCat hook is located at services/revenue-cat.ts. It has all essentials functions to get payments from your users.\nfunction PremiumFeature({ user }) {\n  const {\n    isPro,\n    isInitialized,\n    isLoading,\n    customerInfo,\n    error,\n    purchase,\n    restore,\n  } = useRevenueCat(user.id);\n  if (!isPro) {\n    return (\n      <div>\n        <h2>Unlock Premium Features</h2>\n        <button onClick={() => purchase(\"monthly\")}>\n          Go Premium - $4.99/month\n        </button>\n      </div>\n    );\n  }\n  return <div>Welcome to premium features!</div>;\n}","testing-on-real-devices-before-production#Testing on real devices before production":"","ios#iOS":"Follow this iOS guide","android#Android":"Follow this Android guide","testing-tips#Testing Tips":"Use Apple/Google sandbox accounts for testing\nCheck the RevenueCat dashboard to see purchases\nTest on real devices (the simulator is tricky with purchases)\nThat's it! RevenueCat makes in-app purchases & subscriptions way easier than doing it all yourself.Check out their docs for more details."}},"/features/push-notifications":{"title":"Firebase Push Notifications","data":{"":"Before you continue: Make sure you've completed the Firebase\nAuthentication tutorial first. It walks you through creating\na Firebase project and setting up your iOS/Android apps ‚Äî which is required\nfor push notifications to work.","-step-1-set-up-your-firebase-cloud-messaging-fcm#‚ú® Step 1: Set up your Firebase Cloud Messaging (FCM)":"Make sure you:\nHave Firebase Messaging enabled in your Firebase project.\nDownloaded the service account JSON file from Firebase Console\nNavigate to Project Settings ‚Üí Service Accounts\nClick Generate new private key\nPlace it in services/firebase/ and rename if needed","Ô∏è-step-2-test-sending-push-notifications-manually#‚öñÔ∏è Step 2: Test sending push notifications manually":"Use the prebuilt sendFcmMessage(fcmMessage) function:\nawait sendFcmMessage({\n  message: {\n    token: \"<device-fcm-token>\",\n    notification: {\n      title: \"New Message\",\n      body: \"You've got mail üöÄ\",\n    },\n  },\n});\nThis function handles:\nAuthenticating with Firebase via service account\nSending a POST request to the FCM endpoint","-step-3-request-push-permissions-on-device#üì° Step 3: Request push permissions (on device)":"This is already handled via:\ncheckAndRequestPermissionsForPushNotifications();\nYou can also do it manually:\nawait checkPermissions();\nawait requestPermissions();","-step-4-get-and-update-fcm-token#üéÆ Step 4: Get and update FCM token":"Tokens are generated per device. You need to:\nawait updateFcmToken(user);\nThis will:\nRequest FCM token\nSend it to your API (/user/update-fcm-token) along with user info","-step-5-listen-to-notifications#üöÄ Step 5: Listen to notifications":"These listeners are pre-written for you. You just need to enable them:\naddNotificationReceivedListener();\naddNotificationActionPerformedListener();\nIf needed:\naddTokenReceivedListener();\ngetDeliveredNotifications();","-remove-listeners-when-done#üö´ Remove listeners when done":"removeAllListeners();\nThis is useful to clean up when user logs out or app closes.","Ô∏è-troubleshooting#üõ†Ô∏è Troubleshooting":"If messages are not delivered:\nMake sure token is valid\nCheck Firebase Console > Logs\nVerify service account has Firebase Admin SDK enabled\nIf your token changes, make sure to update it again via updateFcmToken()","-next-steps#üîÑ Next steps":"Trigger push messages from your server (e.g. when new message arrives)\nAdd topic-based notifications if needed\nCustomize notification appearance with images and actions"}},"/":{"title":"Get Started with NextNative","data":{"hey-builder-#Hey, builder üëã":"Here's a quick guide to get your project up and start shipping awesome mobile apps with NextNative fast.","clone-and-install#Clone and install":"In your terminal, run the following commands one-by-one:\ngit clone https://github.com/lite1pal/nextnative_boilerplate.git [YOUR_APP_NAME]\ncd [YOUR_APP_NAME]\nnpm i\ngit remote remove origin\nmv .env.example .env.local\nNextNative requires Node 20 or greater. Type node -v in your terminal to\ncheck version.\nNow make sure your environment is set up\nfor the iOS and Android platforms you will be building for.Here are the essentials:","ios-requiments#iOS requiments":"To build iOS apps with NextNative, you‚Äôll need macOS. While tools like Ionic Appflow offer cloud builds, having a Mac is strongly recommended for proper testing.\nTo get started, you need to install the next:\n\t‚Ä¢\tXcode (via the App Store, version 16.0+ required)\n\t‚Ä¢\tXcode Command Line Tools (xcode-select --install)\n\t‚Ä¢\tHomebrew\n\t‚Ä¢\tCocoapods","xcode#Xcode":"You can install Xcode by using the Apple App Store on your Mac.But don't worry, you're going to build everything in your favorite IDE. Xcode is needed to run an emulator.","cocoapods#CocoaPods":"To run an iOS app in Xcode emulators, you need CocoaPods.Check whether you have already them installed:\npod --version\nIf not, then install them with homebrew:\nbrew install cocoapods\nInstall Homebrew if you don't have it.","android-requirements#Android requirements":"You need to install Android Studio and Android SDK\nIf you have a mac M1-M4, I recommend downloading Android Studio Ladybug\nOctober 2024 release. It's way\nmore stable and has less cache bugs.\nFollow official Capacitor docs.","youre-almost-there-#You're almost there üöÄ":"Now go ahead and follow Ship in 5 minutes tutorial to get your mobile app running!"}},"/preparing-for-deployment":{"title":"Prepare Your App for App Store & Google Play Launch","data":{"":"Before submitting your app to production stores, go through each step below:","-deployment-checklist#‚úÖ Deployment Checklist":"Rename your app\nChange app icon\nBuild app for production\nFollow these in order for a smooth deployment. Each guide is short and tailored to your Capacitor + Next.js setup."}},"/preparing-for-deployment/build-app-for-production":{"title":"Build your app for production","data":{"":"Don't forget to run the following command whenever you make changes to the code before deploying:npm run mobile"}},"/preparing-for-deployment/change-app-icon":{"title":"Set Custom App Icon for iOS and Android with Capacitor","data":{"easy-mode-recommended#Easy Mode (recommended)":"With Easy Mode, the tool supports generating all the icon and splash assets you need for iOS, Android, and PWA from a single logo file along with an optional dark mode logo, and background colors. This is the easiest way to generate all your assets, but it trades customizability for convenience.To use this mode, create a single logo.png or icon.png with an optional logo-dark.png in assets/ (the tool also supports using SVG files as source images, substitue .svg as needed):\nassets/\n‚îú‚îÄ‚îÄ logo.png\n‚îî‚îÄ‚îÄ logo-dark.png\nThen, generate the assets:\nnpx @capacitor/assets generate\nLearn more in Capacitor\ndocs"}},"/tutorials/ionic-router":{"title":"Using Ionic Router in NextNative","data":{"":"To have these slick app-like transitions between screens we need to use Ionic Router and Navbar.","ionic-router#Ionic Router":"Ionic Router is almost the same like React Router, but built for mobile. You'll find it set up in (mobile)/router.tsx.","router-setup#Router Setup":"First, let's understand the main router setup in (mobile)/router.tsx:\nimport { IonApp, IonRouterOutlet, setupIonicReact } from \"@ionic/react\";\nimport { IonReactRouter } from \"@ionic/react-router\";\nimport { Redirect, Route } from \"react-router-dom\";\n// Initialize Ionic React\nsetupIonicReact({});\nconst AppRouter = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <IonRouterOutlet id=\"main\">\n          <Route path=\"/app\" render={() => <YourApp />} />\n          <Route exact path=\"/\">\n            <Redirect to=\"/app\" />\n          </Route>\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n};","key-components#Key Components":"IonApp: The root component that wraps your entire application.\nIonReactRouter: The router component that enables Ionic-specific routing.\nIonRouterOutlet: Defines where your routes will be rendered, similar to React Router's Switch.\nRoute: Standard React Router route component.","creating-tab-based-navigation#Creating Tab-Based Navigation":"For a typical mobile app with tabs, you can create a structure like this:\nimport {\n  IonRouterOutlet,\n  IonTabBar,\n  IonTabButton,\n  IonTabs,\n} from \"@ionic/react\";\nimport { Redirect, Route } from \"react-router-dom\";\nexport default function AppWithTabs() {\n  return (\n    <IonTabs>\n      <IonRouterOutlet>\n        {/* Define your routes here */}\n        <Route exact path=\"/app/home\" component={HomeScreen} />\n        <Route exact path=\"/app/profile\" component={ProfileScreen} />\n        <Route exact path=\"/app/settings\" component={SettingsScreen} />\n        {/* Default redirect */}\n        <Route exact path=\"/app\">\n          <Redirect to=\"/app/home\" />\n        </Route>\n      </IonRouterOutlet>\n      <IonTabBar slot=\"bottom\">\n        <IonTabButton tab=\"home\" href=\"/app/home\">\n          <HomeIcon />\n        </IonTabButton>\n        <IonTabButton tab=\"profile\" href=\"/app/profile\">\n          <ProfileIcon />\n        </IonTabButton>\n        <IonTabButton tab=\"settings\" href=\"/app/settings\">\n          <SettingsIcon />\n        </IonTabButton>\n      </IonTabBar>\n    </IonTabs>\n  );\n}","nested-routes-and-detail-pages#Nested Routes and Detail Pages":"For more complex applications, you'll need nested routes for detail pages. Here's how you can set them up:\n<IonRouterOutlet>\n  {/* List route */}\n  <Route exact path=\"/app/messages\" component={MessagesListScreen} />\n  {/* Detail route with parameter */}\n  <Route\n    path=\"/app/messages/:messageId\"\n    render={({ match }) => (\n      <MessageDetailScreen messageId={match.params.messageId} />\n    )}\n  />\n</IonRouterOutlet>","conditionally-showing-tab-bar#Conditionally Showing Tab Bar":"In many apps, you'll want to hide the tab bar on detail pages:\nconst [showTabs, setShowTabs] = useState(true);\n// Use effect to determine when to show tabs\nuseEffect(() => {\n  const isDetailRoute =\n    location.pathname.includes(\"/app/messages/\") ||\n    location.pathname.includes(\"/app/profile/edit\");\n  setShowTabs(!isDetailRoute);\n}, [location]);\nreturn (\n  <IonTabs>\n    <IonRouterOutlet>{/* Your routes here */}</IonRouterOutlet>\n    {showTabs && (\n      <IonTabBar slot=\"bottom\">{/* Your tab buttons here */}</IonTabBar>\n    )}\n  </IonTabs>\n);","navigation-between-screens#Navigation Between Screens":"To navigate between screens, you can use the standard React Router methods:\n// Using Link component\nimport { Link } from \"react-router-dom\";\n<Link to=\"/app/messages/123\">View Message</Link>;\n// Using history object\nimport { useHistory } from \"react-router-dom\";\nconst history = useHistory();\nhistory.push(\"/app/messages/123\");","animation-transitions#Animation Transitions":"Ionic Router automatically adds smooth transitions between pages. You can customize these transitions if needed:\n<IonRouterOutlet>\n  <Route\n    path=\"/app/messages/:id\"\n    render={({ match }) => (\n      <IonPage>\n        <IonHeader>...</IonHeader>\n        <IonContent>\n          <MessageDetail id={match.params.id} />\n        </IonContent>\n      </IonPage>\n    )}\n  />\n</IonRouterOutlet>","real-world-example#Real-World Example":"Here's how a messenger app might structure its routes:\n<IonTabs>\n  <IonRouterOutlet>\n    {/* Chat list */}\n    <Route exact path=\"/app/chats\" component={ChatsScreen} />\n    {/* Chat detail */}\n    <Route\n      path=\"/app/chats/:chatId\"\n      render={({ match }) => <ChatDetailScreen chatId={match.params.chatId} />}\n    />\n    {/* Contacts list */}\n    <Route exact path=\"/app/contacts\" component={ContactsScreen} />\n    {/* Contact profile */}\n    <Route\n      path=\"/app/contacts/:contactId\"\n      render={({ match }) => (\n        <ContactProfileScreen contactId={match.params.contactId} />\n      )}\n    />\n    {/* Settings */}\n    <Route exact path=\"/app/settings\" component={SettingsScreen} />\n    {/* Default route */}\n    <Route exact path=\"/app\">\n      <Redirect to=\"/app/chats\" />\n    </Route>\n  </IonRouterOutlet>\n  {/* Tab bar */}\n  <IonTabBar slot=\"bottom\">\n    <IonTabButton tab=\"chats\" href=\"/app/chats\">\n      <ChatIcon />\n    </IonTabButton>\n    <IonTabButton tab=\"contacts\" href=\"/app/contacts\">\n      <ContactsIcon />\n    </IonTabButton>\n    <IonTabButton tab=\"settings\" href=\"/app/settings\">\n      <SettingsIcon />\n    </IonTabButton>\n  </IonTabBar>\n</IonTabs>","tips-and-best-practices#Tips and Best Practices":"Keep route definitions organized: For larger apps, consider separating route definitions into their own files.\nUse parameters consistently: Use URL parameters (/route/:id) for identifying resources.\nHandle loading states: Add loading indicators while navigating between routes.\nPreserve scroll position: Ionic handles this automatically in most cases.\nTest on multiple devices: Make sure your navigation works well on various screen sizes.","navbar-component#Navbar component":"","conclusion#Conclusion":"Ionic Router provides a powerful way to create native-like navigation experiences in your NextNative app. By using the components and patterns described in this tutorial, you can create intuitive navigation flows that feel like a native mobile application.For more advanced usage, refer to the Ionic React documentation."}},"/preparing-for-deployment/rename-your-app":{"title":"Rename your app (by default it‚Äôs NextNative)","data":{"ios#iOS":"Don't forget to run the following command whenever you make changes to the code before deploying:npm run mobile\nOpen your project in Xcode by running:\nnpx cap open ios\nSelect the App project, and double-click the App target to rename. Rename Bundle Identifier to be com.[yourappnamelowercase].app:\nOpen Info tab, go to Bundle display name and rename there.\nThen, open ios/App/Podfile and rename the current target at the bottom of the\nfile: Ôøº\nAnd also in capacitor.config.js:\nLearn more in Capacitor\ndocs","android#Android":"Don't forget to run the following command whenever you make changes to the code before deploying:npm run mobile","renaming#Renaming":"To change your app's Package ID (aka Application ID for Android), edit applicationId and namespace at the top of android/app/build.gradle:\nandroid {\n  -       namespace \"com.nextnative.app\"\n  +       namespace \"com.mycompany.appname\"\n  defaultConfig {\n  -       applicationId \"com.nextnative.app\"\n  +       applicationId \"com.mycompany.appname\"\n  }\n}\nThen change the value for app_name, title_activity_main, package_name, and custom_url_scheme in android/app/src/main/res/values/strings.xml:\n<string name=\"app_name\">MyApp</string>\n<string name=\"title_activity_main\">MyApp</string>\n<string name=\"package_name\">com.mycompany.appname</string>\n<string name=\"custom_url_scheme\">com.mycompany.appname</string>\nAlso in capacitor.config.js:\nAnd finally rename a package name in Android Studio.\nRight-click the package (e.g. com.nextnative.app)Select Refactor ‚Üí Rename...\nEnter your new package name: com.yourcompany.appname\nIf that didn‚Äôt work for some reason, rename android/src/main/java/com/[yourcompany]/[appname] path yourself.Then change ‚Äúpackage‚Äù in android/src/main/java/com/[yourcompany]/[appname]/MainActivity.java to your new app‚Äôs package name.","-final-step-clean--invalidate-caches-do-not-skip-this#üßº Final Step: Clean + Invalidate Caches (Do NOT skip this)":"After changing your app‚Äôs package name, namespace, and Java folder structure, Android Studio might still hold on to outdated paths or cached builds. This can lead to strange build errors or the old app ID being used silently.","1-clean-the-project#1. Clean the Project":"Menu ‚Üí Build ‚Üí Clean ProjectThis removes stale build files.","2-invalidate-caches-and-restart-ide#2. Invalidate Caches and Restart IDE":"Menu ‚Üí File ‚Üí Invalidate CachesThen click:üü¶ Invalidate and RestartAndroid Studio will wipe its internal caches, restart, and rebuild everything from scratch using the new package name and paths."}},"/tutorials/onboarding-flow":{"title":"Build an Onboarding Flow in Next.js Mobile Apps","data":{"":"Onboarding helps users understand your app's value and functionality. NextNative provides a customizable onboarding flow with smooth transitions.","onboarding-screen-component#Onboarding Screen Component":"The OnboardingScreen component displays a series of slides and manages navigation between them:\n// Simplified version of app/(mobile)/components/OnboardingScreen.tsx\nconst OnboardingScreen: React.FC<OnboardingScreenProps> = ({ onComplete }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [direction, setDirection] = useState(0);\n  const [isExiting, setIsExiting] = useState(false);\n  // Navigation functions and animations\n  // ...\n  return (\n    <motion.div className=\"fixed inset-0 bg-gradient-to-br from-blue-500 via-blue-600 to-blue-700\">\n      {/* Skip button */}\n      {/* Slide content with animations */}\n      {/* Progress dots and next/done button */}\n    </motion.div>\n  );\n};","onboardinitializer-component#OnboardInitializer Component":"The OnboardInitializer component manages whether to show the onboarding flow or the main app:\n// app/(mobile)/components/OnboardInitializer.tsx\nconst AppInitializer: React.FC<AppInitializerProps> = ({ children }) => {\n  const [onboardingCompleted, setOnboardingCompleted] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  useEffect(() => {\n    const initializeApp = async () => {\n      // Check if onboarding has been completed before\n      const onboardingStatus = await Preferences.get({\n        key: \"onboardingCompleted10\",\n      });\n      setOnboardingCompleted(onboardingStatus.value === \"true\");\n      setIsInitialized(true);\n    };\n    initializeApp();\n  }, []);\n  const handleOnboardingComplete = async () => {\n    await Preferences.set({ key: \"onboardingCompleted10\", value: \"true\" });\n    setOnboardingCompleted(true);\n  };\n  if (!isInitialized) return null;\n  if (!onboardingCompleted) {\n    return <OnboardingScreen onComplete={handleOnboardingComplete} />;\n  }\n  return <>{children}</>;\n};\nThis component:\nChecks if the user has completed onboarding before\nShows the onboarding screen if it's the first time\nRenders the main app if onboarding is completed","using-the-onboarding-flow#Using the Onboarding Flow":"To use the onboarding flow, wrap your app with the OnboardInitializer:\n// app/(mobile)/router.tsx\nimport OnboardInitializer from \"@/app/(mobile)/components/OnboardInitializer\";\nconst AppRouter = () => {\n  const { showSplash } = useSplashScreen();\n  return (\n    <IonApp>\n      {showSplash && <SplashScreen />}\n      <OnboardInitializer>\n        {/* Your main app */}\n        <IonReactRouter>{/* Routes */}</IonReactRouter>\n      </OnboardInitializer>\n    </IonApp>\n  );\n};","customizing-the-onboarding-content#Customizing the Onboarding Content":"The onboarding slides are defined as an array of objects:\nconst onboardingSlides = [\n  {\n    id: 1,\n    title: \"Welcome!\",\n    description: \"Discover the amazing features of our app.\",\n  },\n  {\n    id: 2,\n    title: \"Connect Seamlessly\",\n    description: \"Stay in touch with friends and colleagues effortlessly.\",\n  },\n  {\n    id: 3,\n    title: \"Get Started\",\n    description: \"You're all set to explore. Let's dive in!\",\n  },\n];\nTo customize the onboarding content:\nEdit the titles and descriptions\nAdd more slides if needed\nCustomize the background color or gradient\nAdd images or illustrations to each slide","customizing-the-splash-screen#Customizing the Splash Screen":"To customize your splash screen:\nReplace the DefaultLogo component with your own logo\nAdjust the animation timing and transitions\nChange the background color or gradient\nAdd additional animations or elements\nNextNative includes several pre-made splash screen logos that you can use:\nDefaultLogo\nSpinningStar\nPulsingSpiral\nFoldingTriangles\nSwoosh\nAppleBite\nXCross\nSimply import and use them in your SplashScreen component.","best-practices#Best Practices":"Keep onboarding brief: Limit to 3-4 screens highlighting key features\nMake it skippable: Always provide an option to skip\nTest with real users: Ensure your flow is intuitive\nConsider accessibility: Make sure your splash screen and onboarding work well with screen readers\nOptimize animations: Keep animations smooth and lightweight"}},"/tutorials/ship-in-5-minutes":{"title":"Ship in 5 minutes","data":{"":"Let's get your mobile app running in 5 minutes ‚ö°Ô∏èWe're going to use a production-ready template messenger app that I've included.","1-prerequisite#1. Prerequisite":"If you haven‚Äôt already, complete the Get Started tutorial first.","2-run-a-mobile-dev-server#2. Run a mobile dev server":"Use this command to start your mobile app in development mode. It handles:\nStatic builds\nNext.js API support\nWatching changes\nReloading updates\nnpm run mobile:dev\nIt starts a local server with Live Reload, to which a mobile app will be connected.\nWhen you're ready to ship the production build to the App Store or Google Play, run:npm run mobileThen follow the Preparing for deployment guide.","ios#iOS":"","1-open-in-xcode#1. Open in Xcode":"To launch the iOS app in a simulator:\nnpx cap open ios\nOr simply open Xcode yourself and choose the nextnative/ios/App/App.xcworkspace file.","2-run-the-simulator#2. Run the Simulator":"Click the ‚ñ∂Ô∏è Run button in Xcode to boot your app.\nüïì The first build might take a bit longer ‚Äî Xcode will compile and set up your project.‚úÖ All future reloads will be much faster.","android#Android":"If you don't need Firebase Auth/Notifications in your app at all,\ngo to build.gradle and remove this line:\napply plugin: 'com.google.gms.google-services'\nThen skip to Step 5.\nRename your app before setting\nup Firebase for Android.","1-add-a-new-android-app-on-firebase#1. Add a new Android app on Firebase":"In the Firebase console:\nClick Add App ‚Üí Select Android\nEnter your app‚Äôs Package name (e.g. com.yourcompany.appname)\n(Optional) Add app nickname\nClick Register app","2-download--place-config-file#2. Download & place config file":"Download the google-services.json file\nPlace it in:\nandroid/app/google-services.json","3-edit-buildgradle#3. Edit build.gradle":"It's already done in the latest update of NextNative, so if you have the\nlatest version pulled, no need to do this.\nGo to android/app/build.gradle and replace these lines:\ntry {\n    def servicesJSON = file('google-services.json')\n    if (servicesJSON.text) {\n        apply plugin: 'com.google.gms.google-services'\n    }\n} catch(Exception e) {\n    logger.info(\"google-services.json not found, google-services plugin not applied. Push Notifications won't work\")\n}\nwith only this one line:\napply plugin: 'com.google.gms.google-services'","4-rerun-a-mobile-dev-server#4. Rerun a mobile dev server":"npm run mobile:dev","5-open-in-android-studio#5. Open in Android Studio":"To launch an Android app in an emulator or a real device:\nnpx cap open android\nOr simply open Android Studio yourself and choose the nextnative/ios folder.","6-run#6. Run":"Click the ‚ñ∂Ô∏è Run button in Android Studio to boot your app.\nRun your app on a real Android phone.\n  It‚Äôs the only way to test native Google login reliably on a Mac\nM1/M2 and many Windows PCs.   If you don't have an Android phone,\nno worries, you can test everything in a browser. But it's recommended to test\non a real device before publishing an app.","youre-live-#You‚Äôre Live! üöÄ":"That‚Äôs it, you‚Äôve got a native mobile app running with Next.js in just a few minutes.Go ahead and start building your own features:","next-steps#Next Steps":"Now that your app is running, here‚Äôs what you can explore next:\nüóÉÔ∏è Connect a Database to store and sync data\nüîê Add Firebase Authentication to authenticate users\nüí∞ Enable In-App Purchases to start making money\nüîî Set up Push Notifications to re-engage users\nüöÄ Prepare for App Store / Play Store deployment\nYour app‚Äôs foundation is solid ‚Äî time to build something amazing üí°\nWant to go deeper? Explore more tutorials like:\nüß© Router\nüîÑ Make Requests to Next.js API\nüß™ Native Device Features\nüé® Splash Screen Setup\nüîë Onboarding Flow\nEvery piece brings you closer to launching a full-featured mobile app."}},"/tutorials/native-device-features":{"title":"Access Native APIs with Capacitor Plugins","data":{"":"One of the best things about Capacitor is that it lets your app use real device features, like storage, sharing, camera, and location. In this guide, you‚Äôll learn how to use them in your NextNative app.","understanding-capacitor#Understanding Capacitor":"Capacitor is the native runtime that powers NextNative apps. It provides a consistent, web-focused API for accessing native device functionality across platforms.Key benefits of Capacitor:\nAccess native functionality through JavaScript\nCross-platform support (iOS, Android, and web)\nExtensive plugin ecosystem\nSeamless integration with web frameworks","setting-up-capacitor#Setting Up Capacitor":"NextNative includes Capacitor pre-configured in the boilerplate. The main configuration file is capacitor.config.ts:\n// capacitor.config.ts\nimport type { CapacitorConfig } from \"@capacitor/cli\";\nconst config: CapacitorConfig = {\n  appId: \"com.nextnative.app\",\n  appName: \"NextNative\",\n  webDir: \"out\",\n  ios: {\n    scheme: \"NextNative\",\n  },\n  plugins: {\n    SplashScreen: {\n      backgroundColor: \"#1a1a1a\",\n      splashFullScreen: true,\n      splashImmersive: true,\n      launchAutoHide: false,\n    },\n    FirebaseAuthentication: {\n      skipNativeAuth: false,\n      providers: [\"google.com\", \"apple.com\"],\n    },\n    FirebaseMessaging: {\n      presentationOptions: [\"sound\", \"alert\"],\n    },\n  },\n};\nexport default config;\nThis file configures your app's ID, name, and plugin-specific options.\nLearn more in Capacitor docs about\nconfig","checking-platform#Checking Platform":"Before using native features, it's often necessary to check which platform your app is running on:\nimport { Capacitor } from \"@capacitor/core\";\n// Check if running on a native platform (iOS/Android)\nconst isNative = Capacitor.isNativePlatform();\n// Get the specific platform\nconst platform = Capacitor.getPlatform(); // 'ios', 'android', or 'web'\n// Example usage\nif (platform === \"ios\") {\n  // iOS-specific code\n} else if (platform === \"android\") {\n  // Android-specific code\n} else {\n  // Web fallback\n}\nThis pattern is commonly used throughout NextNative to provide platform-specific behavior.","essential-capacitor-plugins#Essential Capacitor Plugins":"Let's explore how to use some of the core Capacitor plugins in your NextNative app:","1-preferences-data-storage#1. Preferences (Data Storage)":"The Preferences plugin provides persistent key-value storage:\nimport { Preferences } from \"@capacitor/preferences\";\n// Saving data\nasync function saveData() {\n  await Preferences.set({\n    key: \"user_settings\",\n    value: JSON.stringify({\n      darkMode: true,\n      notifications: true,\n    }),\n  });\n}\n// Loading data\nasync function loadData() {\n  const { value } = await Preferences.get({ key: \"user_settings\" });\n  if (value) {\n    return JSON.parse(value);\n  }\n  return null;\n}\n// Removing data\nasync function removeData() {\n  await Preferences.remove({ key: \"user_settings\" });\n}\n// Clearing all data\nasync function clearAll() {\n  await Preferences.clear();\n}\nNextNative provides a storage service wrapper for Preferences in app/(mobile)/services/storage.ts that adds a structured layer on top of the basic API:\nimport {\n  PreferencesStorageAdapter,\n  StorageService,\n} from \"@/app/(mobile)/services/storage\";\n// Using the storage service in a component\nasync function loadUserSettings() {\n  try {\n    const settings = await StorageService.loadSettings();\n    setDarkMode(settings.darkMode || false);\n    setNotifications(settings.notifications || false);\n  } catch (error) {\n    console.error(\"Failed to load settings:\", error);\n  }\n}","2-share#2. Share":"The Share plugin lets you access the native sharing dialog:\nimport { Share } from \"@capacitor/share\";\nasync function shareContent() {\n  await Share.share({\n    title: \"Check out NextNative!\",\n    text: \"Build cross-platform apps with Next.js\",\n    url: \"https://nextnative.dev\",\n    dialogTitle: \"Share with your friends\",\n  });\n}\nReal-world example from NextNative settings screen:\nimport { Share } from \"@capacitor/share\";\n// In a component\n<Button\n  onClick={async () => {\n    await Share.share({\n      title: \"NextNative\",\n      text: \"Build mobile apps with NextNative\",\n      url: \"https://nextnative.dev\",\n      dialogTitle: \"Share with friends\",\n    });\n  }}\n>\n  Share App\n</Button>","3-camera#3. Camera":"To access the device camera:\nimport { Camera, CameraResultType, CameraSource } from \"@capacitor/camera\";\nasync function takePicture() {\n  try {\n    const image = await Camera.getPhoto({\n      quality: 90,\n      allowEditing: true,\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n    });\n    // The image URI can be used in an <img> tag or uploaded to a server\n    const imageUrl = image.webPath;\n    setProfileImage(imageUrl);\n  } catch (error) {\n    console.error(\"Failed to take photo:\", error);\n  }\n}","4-geolocation#4. Geolocation":"To access the device's location:\nimport { Geolocation } from \"@capacitor/geolocation\";\nasync function getCurrentPosition() {\n  try {\n    const coordinates = await Geolocation.getCurrentPosition();\n    console.log(\"Current position:\", coordinates);\n    const { latitude, longitude } = coordinates.coords;\n    setUserLocation({ lat: latitude, lng: longitude });\n  } catch (error) {\n    console.error(\"Failed to get location:\", error);\n  }\n}","5-push-notifications#5. Push Notifications":"NextNative integrates with Firebase for push notifications. Here's a simplified example:\nimport { FirebaseMessaging } from \"@capacitor-firebase/messaging\";\n// Request permission to receive notifications\nasync function requestNotificationPermission() {\n  try {\n    const { receive } = await FirebaseMessaging.requestPermissions();\n    if (receive === \"granted\") {\n      await registerNotifications();\n    }\n  } catch (error) {\n    console.error(\"Notification permission error:\", error);\n  }\n}\n// Register for push notifications\nasync function registerNotifications() {\n  // Get the FCM token\n  const { token } = await FirebaseMessaging.getToken();\n  // Save the token to your server\n  await saveTokenToServer(token);\n  // Listen for incoming messages\n  FirebaseMessaging.addListener(\"notificationReceived\", (notification) => {\n    console.log(\"New notification:\", notification);\n  });\n}","creating-a-custom-hook-for-device-features#Creating a Custom Hook for Device Features":"For a clean architecture, consider creating custom hooks for device features:\n// hooks/useDeviceCamera.ts\nimport { useState } from \"react\";\nimport { Camera, CameraResultType, CameraSource } from \"@capacitor/camera\";\nimport { Capacitor } from \"@capacitor/core\";\nexport function useDeviceCamera() {\n  const [photo, setPhoto] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  async function takePhoto() {\n    if (!Capacitor.isNativePlatform()) {\n      setError(new Error(\"Camera is only available on native platforms\"));\n      return null;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const image = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Uri,\n        source: CameraSource.Camera,\n      });\n      const photoUrl = image.webPath || \"\";\n      setPhoto(photoUrl);\n      return photoUrl;\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error(\"Unknown camera error\"));\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }\n  return {\n    photo,\n    takePhoto,\n    loading,\n    error,\n  };\n}\nUsage example:\nfunction ProfileScreen() {\n  const { photo, takePhoto, loading } = useDeviceCamera();\n  return (\n    <div>\n      {photo && (\n        <img\n          src={photo}\n          alt=\"Profile Photo\"\n          className=\"w-32 h-32 rounded-full object-cover\"\n        />\n      )}\n      <Button onClick={takePhoto} disabled={loading}>\n        {loading ? \"Processing...\" : \"Take Photo\"}\n      </Button>\n    </div>\n  );\n}","handling-web-fallbacks#Handling Web Fallbacks":"A key advantage of NextNative is its ability to work on both web and mobile. When using native features, provide web fallbacks:\nimport { Capacitor } from \"@capacitor/core\";\nimport { Share } from \"@capacitor/share\";\nasync function shareContent() {\n  const content = {\n    title: \"NextNative\",\n    text: \"Build mobile apps with web technologies\",\n    url: \"https://nextnative.dev\",\n  };\n  try {\n    if (Capacitor.isNativePlatform()) {\n      // Native sharing\n      await Share.share({\n        ...content,\n        dialogTitle: \"Share with friends\",\n      });\n    } else if (navigator.share) {\n      // Web Share API (modern browsers)\n      await navigator.share({\n        title: content.title,\n        text: content.text,\n        url: content.url,\n      });\n    } else {\n      // Fallback for browsers without share capability\n      copyToClipboard(`${content.text} ${content.url}`);\n      alert(\"Link copied to clipboard!\");\n    }\n  } catch (error) {\n    console.error(\"Error sharing:\", error);\n  }\n}\nfunction copyToClipboard(text: string) {\n  navigator.clipboard.writeText(text).catch((err) => {\n    console.error(\"Could not copy text: \", err);\n  });\n}","adding-new-capacitor-plugins#Adding New Capacitor Plugins":"To add additional native functionality, you can install more Capacitor plugins:\nInstall the plugin:\nnpm install @capacitor/plugin-name\nnpm run mobile:dev\nImport and use the plugin in your app:\nimport { PluginName } from \"@capacitor/plugin-name\";\n// Use the plugin\nasync function usePlugin() {\n  const result = await PluginName.methodName();\n  console.log(result);\n}","example-building-a-location-based-feature#Example: Building a Location-Based Feature":"Let's create a complete example that uses geolocation and the device camera:\nimport React, { useState, useEffect } from \"react\";\nimport { IonContent, IonPage, IonButton } from \"@ionic/react\";\nimport { Geolocation } from \"@capacitor/geolocation\";\nimport { Camera, CameraResultType, CameraSource } from \"@capacitor/camera\";\nimport { Capacitor } from \"@capacitor/core\";\nimport { Share } from \"@capacitor/share\";\nimport ScreenContainer from \"@/app/(mobile)/components/ScreenContainer\";\ninterface LocationPhoto {\n  photoUrl: string;\n  location: {\n    latitude: number;\n    longitude: number;\n  };\n  timestamp: number;\n}\nexport default function LocationPhotoScreen() {\n  const [photos, setPhotos] = useState<LocationPhoto[]>([]);\n  const [loading, setLoading] = useState(false);\n  async function captureLocationPhoto() {\n    if (!Capacitor.isNativePlatform()) {\n      alert(\"This feature requires a mobile device\");\n      return;\n    }\n    try {\n      setLoading(true);\n      // 1. Get current location\n      const position = await Geolocation.getCurrentPosition();\n      // 2. Take a photo\n      const image = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: false,\n        resultType: CameraResultType.Uri,\n        source: CameraSource.Camera,\n      });\n      const photoUrl = image.webPath || \"\";\n      // 3. Create a new entry\n      const newPhoto: LocationPhoto = {\n        photoUrl,\n        location: {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        },\n        timestamp: Date.now(),\n      };\n      // 4. Update state\n      setPhotos((prev) => [...prev, newPhoto]);\n      // 5. Show success message\n      alert(\"Photo captured with location!\");\n    } catch (error) {\n      console.error(\"Error capturing location photo:\", error);\n      alert(\"Failed to capture photo with location\");\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function sharePhoto(photo: LocationPhoto) {\n    try {\n      await Share.share({\n        title: \"My Location Photo\",\n        text: `Photo taken at coordinates: ${photo.location.latitude}, ${photo.location.longitude}`,\n        url: photo.photoUrl,\n      });\n    } catch (error) {\n      console.error(\"Error sharing photo:\", error);\n    }\n  }\n  return (\n    <ScreenContainer>\n      <div className=\"p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Location Photos</h1>\n        <div className=\"mb-4\">\n          <IonButton\n            expand=\"block\"\n            onClick={captureLocationPhoto}\n            disabled={loading || !Capacitor.isNativePlatform()}\n          >\n            {loading ? \"Processing...\" : \"Capture Photo with Location\"}\n          </IonButton>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {photos.map((photo, index) => (\n            <div\n              key={index}\n              className=\"border rounded-lg overflow-hidden bg-white dark:bg-gray-800\"\n            >\n              <img\n                src={photo.photoUrl}\n                alt={`Location ${index}`}\n                className=\"w-full h-40 object-cover\"\n              />\n              <div className=\"p-2\">\n                <p className=\"text-xs text-gray-500\">\n                  {new Date(photo.timestamp).toLocaleString()}\n                </p>\n                <p className=\"text-xs\">\n                  {photo.location.latitude.toFixed(4)},\n                  {photo.location.longitude.toFixed(4)}\n                </p>\n                <button\n                  className=\"mt-2 text-blue-500 text-sm\"\n                  onClick={() => sharePhoto(photo)}\n                >\n                  Share\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n        {photos.length === 0 && (\n          <p className=\"text-center text-gray-500 mt-8\">\n            No photos yet. Tap the button above to capture one!\n          </p>\n        )}\n      </div>\n    </ScreenContainer>\n  );\n}","best-practices#Best Practices":"Always check platform: Use Capacitor.isNativePlatform() before executing native code\nProvide web fallbacks: Create web alternatives when native features aren't available\nHandle permissions: Request and check permissions before using sensitive features\nError handling: Implement proper error handling for all native API calls\nLazy loading: Consider lazy-loading native plugins to reduce initial bundle size\nTesting: Test your app on actual devices, not just in the browser\nVersion management: Keep Capacitor and plugins updated for best compatibility\nFor more information on available plugins and their APIs, refer to the Capacitor documentation.\nLearn more in Capacitor docs"}},"/tutorials/splash-screen":{"title":"Customize Splash Screen in iOS & Android with Capacitor","data":{"":"First impressions matter, and a clean splash screen makes your app feel professional right from the start.With NextNative and Capacitor, adding a native and animated splash screen is super easy. Let‚Äôs walk through it.\nThe splash screen is the first thing users see when launching your app. NextNative provides both a native splash screen (using Capacitor) and a custom in-app splash screen for a smooth transition.","native-splash-screen#Native Splash Screen":"The native splash screen is managed by Capacitor and appears instantly when the app launches. You can customize it in the assets/ folder and generate platform-specific assets using the Capacitor CLI.","in-app-splash-screen#In-App Splash Screen":"The in-app splash screen takes over after the native splash screen and provides a smoother transition to your app:\n// app/(mobile)/components/SplashScreen.tsx\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nconst SplashScreen = () => {\n  return (\n    <motion.div\n      className=\"fixed inset-0 z-50 overflow-hidden bg-gradient-to-br from-blue-500 via-blue-600 to-blue-700\"\n      initial={{ opacity: 1 }}\n      animate={{ opacity: 0 }}\n      transition={{ duration: 0.5, delay: 1.5 }}\n      style={{ pointerEvents: \"none\" }}\n    >\n      <DefaultLogo />\n    </motion.div>\n  );\n};\nexport default SplashScreen;\nThis component uses Framer Motion for smooth animations. The DefaultLogo is a simple SVG animation, but you can replace it with your own logo.","managing-the-splash-screen#Managing the Splash Screen":"NextNative provides a custom hook to manage the splash screen:\n// app/(mobile)/hooks/useSplashScreen.tsx\nimport { useState, useEffect } from \"react\";\nimport { SplashScreen as SplashScreenPlugin } from \"@capacitor/splash-screen\";\nexport const useSplashScreen = () => {\n  const [showSplash, setShowSplash] = useState(true);\n  useEffect(() => {\n    const hideSplash = async () => {\n      await SplashScreenPlugin.hide();\n      setTimeout(() => {\n        setShowSplash(false);\n      }, 2000);\n    };\n    hideSplash();\n  }, []);\n  return { showSplash };\n};\nThis hook:\nHandles the native Capacitor splash screen\nControls the visibility of the in-app splash screen\nReturns a showSplash boolean to conditionally render the splash screen","using-the-splash-screen-in-your-app#Using the Splash Screen in Your App":"To use the splash screen in your app, import the hook and component in your router:\n// app/(mobile)/router.tsx\nimport { useSplashScreen } from \"@/app/(mobile)/hooks/useSplashScreen\";\nimport SplashScreen from \"@/app/(mobile)/components/SplashScreen\";\nconst AppRouter = () => {\n  const { showSplash } = useSplashScreen();\n  return (\n    <IonApp>\n      {showSplash && <SplashScreen />}\n      {/* Rest of your app */}\n    </IonApp>\n  );\n};"}}}